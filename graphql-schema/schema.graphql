# A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`.
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# A date string with format `Y-m-d`, e.g. `2011-05-23`.
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    user(id: ID @eq):       User        @find(model: "App\\Models\\User")
    center(id: ID @eq):     Center      @find(model: "App\\Models\\Center")
    city(id: ID @eq):       City        @find(model: "App\\Models\\City")
    student(id: ID @eq):    Student     @find(model: "App\\Models\\Student")
    group(id: ID @eq):      Group       @find(model: "App\\Models\\Group")
    vertical(id: ID @eq):   Vertical    @find(model: "App\\Models\\Vertical")
    batch(id: ID @eq):      Batch       @find(model: "App\\Models\\Batch")
    level(id: ID @eq):      Level       @find(model: "App\\Models\\Level")
    event(id: ID @eq):      Event       @find(model: "App\\Models\\Event")
    class(id: ID @eq):      Class       @find(model: "App\\Models\\Classes")
    donation(id: ID @eq):   Donation    @find(model: "App\\Models\\Donation")
    donor(id: ID @eq):      Donor       @find(model: "App\\Models\\Donor")
    survey(id: ID @eq):     Survey      @find(model: "App\\Models\\Survey")
    project(id: ID @eq):    Project     @find(model: "App\\Models\\Project")
    subject(id: ID @eq):    Subject     @find(model: "App\\Models\\Subject")
    tag(name: String @eq):  Tag         @find(model: "App\\Models\\Tag")
    survey_template(id: ID @eq):    Survey_Template @find(model: "App\\Models\\Survey_Template")

    # :HARDCODE: - Global replace all 2021 to next year. Not sure how to do it any other way yet. Other than custom resolvers for everything.

    donations(added_on: Date = "2021-05-01" @where(operator: ">="), amount: Int, status: String, 
        type: String, fundraiser_user_id: Int, updated_by_user_id: Int, donor_id: Int): 
        [Donation] @all(model: "App\\Models\\Donation")
    events(name: String @where(operator: "like"), starts_on: DateTime @eq, place: String @eq, city_id: Int @eq, 
        event_type_id: Int @eq, vertical_id: Int @eq, status: String = "1" @eq, sort_order: [OrderByClause!] @orderBy): [Event!]! @all
    event_types(name: String @where(operator: "like"), vertical_id: Int @eq, role: String @eq, audience: String @eq): [Event_Type!]! @all
    users(name: String @where(operator: "like"), email: String @eq, mad_email: String @eq, 
        phone: String @eq, city_id: Int @eq, status: String = "1" @eq, user_type: String = "volunteer" @eq, sort_order: [OrderByClause!] @orderBy): 
        [User] @all # @paginate(type: "paginator" model: "App\\Models\\User")
    centers(city_id: Int @eq, status: String = "1" @eq, sort_order: [OrderByClause!] @orderBy): [Center!]! @all
    students(name: String @where(operator: "like"), sex: String @eq, center_id: Int @eq, status: String = "1" @eq,
        sort_order: [OrderByClause!] @orderBy): [Student!]! @all
    levels(center_id: Int @eq, project_id: Int @eq, name: String @where(operator:"like"), grade: Int @eq,
        status: String = "1" @eq, year: Int = 2021 @eq, sort_order: [OrderByClause!] @orderBy): [Level!]! @all
    allocations(batch_id: Int @eq, level_id: Int @eq, user_id: Int @eq, subject_id: Int @eq, role: String = "teacher" @eq): [Allocation] @all
    cities(type: String = "actual" @eq, sort_order: [OrderByClause!] @orderBy): [City!]! @all
    groups(group_type: String = "normal" @eq, status: String = "1" @eq, type: String @eq, 
        vertical_id: Int @eq, sort_order: [OrderByClause!] @orderBy): [Group!]! @all
    verticals(status: String = "1" @eq): [Vertical!]! @all
    projects(status: String = "1" @eq): [Project!]! @all
    subjects(status: String = "1" @eq): [Subject!]! @all
    comments(item_type: String @eq, item_id: String @eq, sort_order: [OrderByClause!] @orderBy): [Comment] @all

    # Custom Resolvers... 
    # The files that control these can be found at  app/GraphQL/Queries/<FileName>.php
    eventsInCity(city_id: ID): [Event] #Custom - app/GraphQL/Queries/EventsInCity.php - This is just a sample 
    batchSearch(batch_id: Int, teacher_id: Int, level_id: Int, project_id: Int, center_id: Int, mentor_id: Int, 
        class_status: String, direction: String, from_date: Date, limit: String): [Batch]
    classSearch(teacher_id: Int, level_id: Int, project_id: Int, status: String, batch_id: Int, 
        class_date: Date, direction: String, from_date: Date, limit: String): [Class]
    userSearch(city_id: Int!, name: String, phone: String, email: String, mad_email: String, 
        any_email: String, identifier: String, left_on: Date, vertical_id: Int, status: String, 
        user_type: String, not_user_type: String, center_id: Int, group_id: Int, group_type: String, 
        batch_id: Int, level_id: Int): [User]
    studentSearch(city_id: Int, name: String, center_id: Int): [Student]
        sendOtp(email: String, phone: String): User
        verifyOtp(id: ID, email: String, phone: String, otp: String): Int

    # classConnection(teacher_id: Int, mentor_id: Int): [ClassConnection] #Custom return  + resolver. Used for finding unfilled data in UPMA. Both teacher and student.
    teacherClassConnection(teacher_id: Int): [TeacherClassConnection]
    mentorClassConnection(mentor_id: Int): [MentorClassConnection]
}

input OrderByClause{
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}

type Mutation {
    createLog(name: String, log: String, user_id: ID, level: String, added_on: DateTime): String
    cancelClass(class_id: ID, mentor_id: ID, reason: ClassCancelReason!, reason_other: String): Int
    saveTeacherAttendance(class_id: ID, mentor_id: Int, teachers: [InputTeacherAttendance]): Int
    saveStudentAttendance(class_id: ID, teacher_id: Int, class_satisfaction: Int, students: [InputStudentAttendance]): Int
    saveSurveyResponses(responder_id: ID, survey_id: ID, added_by_user_id: ID, responses: [InputSurveyResponse]): Int
    assignBatchTeachers(batch_id: ID!, level_id: ID!, subject_id: ID, teacher_ids: [ID]): String
    assignBatchMentors(batch_id: ID!, mentor_ids: [ID]): String
    assignLevelStudents(level_id: ID!, student_ids: [ID]): String
    markEventAttendance(event_id: ID!, attendance: [InputUseEventAttendance]): Int
    createDevice(user_id:ID, token: String): Int
    insertDonation(donation: InputDonationData): Int
    inviteEventUsers(event_id: ID!, user_ids:[ID], send_invites: Boolean ): Int
    updateEventAttendance(user_ids: [ID], event_id: ID!): Int
}

input InputTeacherAttendance {
    user_id: Int!
    substitute_id: Int
    zero_hour_attendance: String # Enum 1,0
    status: String! # :TODO: This should be ENUM - 'attended', 'absent'
}
input InputStudentAttendance {
    student_id: Int!
    participation: Int!
    check_for_understanding: Int
}
input InputSurveyResponse {
    question_id: ID! 
    choice_id: ID
    response: String
}
input InputUseEventAttendance {
    user_id: Int!
    present: Int
    late: Int
    rsvp: Int
    reason: String
}

input InputDonationData {
    donor_name: String!
    donor_email: String!
    donor_phone: String!
    donor_address: String
    type: String!
    fundraiser_user_id: Int 
    amount: Int 
    added_on: String
    comment: String
    
}

input InputEventData {
    frequency: String 
    repeat_until: String
}


# For Polymorphic relations - In Comment and Data
union Item = User | Student | Center | Event | Class | City | Batch | Level | Comment

# Volunteer details.
type User {
    id: ID!
    name: String!
    email: String
    phone: String
    mad_email: String
    credit: Float
    city_id: Int
    city: String
    joined_on: String
    left_on: String
    reason_for_leaving: String
    user_type: String
    address: String
    birthday: String
    photo: String
    sex: String
    status: String
    groups: [Group]
    past_groups: [Group] @hasMany(relation: "pastGroups")
    data: [Data]
    city: City @belongsTo
    center: Center @belongsTo
    classes: [Class] @hasMany(relation: "classes") # :TODO: - Ideally, this should take an argument - (status: String)
    past_classes: [Class] @hasMany(relation: "pastClasses")
    batches: [Batch] @hasMany
    mentored_batches: [Batch] @hasMany(relation: "mentoredBatches")
    donations: [Donation] @hasMany
    past_donations: [Donation] @hasMany(relation: "pastDonations")
    devices: [Device] @hasMany
    links: [Link] @hasMany
    conversations: [Conversation] @hasMany
    pivot: UserPivot
}

# This holds reference table/pivot details for both event(UserEvent) and class data(UserClass) details.
type UserPivot {
    # UserClass data - teacher attendance
    status: String
    substitute_id: Int
    zero_hour_attendance: Int

    # UserEvent data - event attendance
    present: Int
    late: Int
    user_choice: Int
    reason: String
}

type Student {
    id: ID!
    name: String!
    description: String
    birthday: String
    added_on: String
    student_type: String
    center_id: Int
    sex: String
    reason_for_leaving: String
    center: Center @belongsTo
    comments: [Comment] @morphMany
    levels: [Level] @hasMany
    past_levels: [Level] @hasMany(relation: "pastLevels")
    classes: [Class] @hasMany
    past_classes: [Class] @hasMany(relation: "pastClasses")
    pivot: StudentAttendance
}
type StudentAttendance {
    student_id: Int
    present: String
    participation: Int
    check_for_understanding: Int
}

type Center {
    id: ID!
    name: String!
    teachers: [User]
    students: [Student]
    batches: [Batch]
    levels: [Level]
    # projects: [Project]
    users: [User]
    projects: [CenterProject]
    city: City @belongsTo
    comments: [Comment] @morphMany
}

type CenterProject {
    id: ID @method(name: "pid")
    name: String @method(name: "name")
    center_id: Int 
    project_id: Int
    year: Int
    batches: [Batch]
    levels: [Level]
}

type City {
    id: ID!
    name: String!
    president_id: Int
    type: String
    users: [User]
    centers: [Center]
}

type Group {
    id: ID!
    name: String!
    vertical_id: Int
    vertical: Vertical
    main: Int
    year: String
    users: [User]
}

type Vertical {
    id: ID!
    name: String!
    groups: [Group]
    # users: [User]
}

type Batch {
    id: ID!
    batch_name: String @method(name: "name")
    day: String
    class_time: String
    project_id: Int
    year: Int
    center: Center @belongsTo
    levels: [Level]
    teachers: [User]
    mentors: [User]
    classes: [Class]
    allocations: [Allocation]
}

type Level {
    id: ID!
    level_name: String @method(name: "name")
    name: String!
    grade: String!
    project_id: Int
    year: Int
    center: Center @belongsTo
    batches: [Batch]
    teachers: [User]
    students: [Student]
    allocations: [Allocation]
}

type Class {
    id: ID!
    class_on: DateTime
    class_type: String
    class_satisfaction: Int 
    cancel_option: String
    cancel_reason: String
    status: String
    level: Level @belongsTo
    batch: Batch @belongsTo
    students: [Student]
    teachers: [User]
    substitutes: [User]
    pivot: StudentAttendance
}

type Allocation {
    id: ID!
    role: String
    batch: Batch 
    level: Level
    subject: Subject
    teachers: [User]
    mentors: [User]
    users: [User]
}

type Project {
    id: ID!
    name: String
    vertical_id: Int
}

type Subject {
    id: ID!
    name: String
}

type Medium {
    id: ID!
    name: String
}

type Event {
    id: ID!
    name: String!
    description: String
    place: String
    type: String
    city_id: ID
    starts_on: DateTime
    event_type_id: ID
    status: String
    event_type_name: String @method(name: "computed_type_name")
    event_type: Event_Type
    city: City
    invitees: [User]
    attendees: [User]
}

type Event_Type {
    id: ID!
    name: String!
    computed_name: String @method(name: "computed_name")
    vertical_id: ID
    role: String
    audience: String
}

type Survey {
    id: ID!
    name: String
    template: Survey_Template
    responses: [Survey_Response]
}

type Survey_Template {
    id: ID!
    name: String
    description: String
    responder: String
    options: String
    status: String
    vertical: Vertical
    surveys: [Survey]
    questions: [Survey_Question]
}

type Survey_Question {
    id: ID!
    question: String
    description: String
    response_type: String
    required: String
    sort_order: Int
    options: String
    category: Survey_Category
    choices: [Survey_Choice]
    template: Survey_Template
    responses: [Survey_Response]
}

type Survey_Choice {
    id: ID!
    name: String
    description: String
    value: Int
    sort_order: Int
    options: String
    question: Survey_Question
}

type Survey_Category {
    id: ID!
    name: String
    questions: [Survey_Question]
    template: Survey_Template
}

type Survey_Response {
    survey: Survey
    responder_id: Int
    question: Survey_Question
    selected_choice: Survey_Choice
    response: String
    added_by_user_id: Int
}

type Donation {
    id: ID!
    type: String
    status: String
    amount: Float
    reference_file: String
    nach_start_on: DateTime
    nach_end_on: DateTime
    cheque_no: String
    added_on: DateTime
    comment: String

    with_user_id: Int
    fundraiser_user_id: Int 
    donor_id: Int

    fundraiser: User
    donor: Donor
    deposit: [Deposit]
}

type Donor {
    id: ID!
    name: String
    phone: String
    email: String
    address: String
    donor_finance_id: Int
    added_on: DateTime
}

type Deposit {
    id: ID!
    added_on: DateTime
    reviewed_on: DateTime
    amount: Float
    status: String
    collected_from_user_id: Int 
    given_to_user_id: Int

    collected_from: User 
    given_to: User  
}

type Log {
    name: String
    log: String
    added_on: DateTime
    user_id: Int
}

type Device {
    id: ID!
    name: String
    token: String
    status: String
    user: User
}

type Link {
    id: ID!
    name: String
    url: String
    text: String
    status: String
}

type Data {
    name: String!
    data: String!
    item: String
    item_id: Int
    year: Int
}

type Comment {
    id: ID!
    item_type: String
    item_id: Int
    comment: String
    added_on: DateTime
    added_by_user: User
    item: Item @morphTo
}

type Tag {
    id: ID!
    name: String
    item: Item @morphTo
    comments: [Comment] @morphMany
    # :TODO: More items to come
}

type Conversation {
    id: ID!
    type: String
    stage: String
    user: User 
    assigned_to: User 
    scheduled_on: DateTime
    comment: String
    parent_conversation: Conversation
    added_by: User
    added_on: DateTime
}

# Custom Returns 
type MentorClassConnection {
    batch_id: ID!
    batch_name: String
    day: String
    class_time: String
    class_on: DateTime
    center_id: ID
    center_name: String
}
type TeacherClassConnection {
    level_id: Int
    level: String
    batch_id: Int
    batch_name: String
    day: String
    class_time: String
    class_on: DateTime
    class_id: Int
    center_id: ID
    center_name: String
}

enum Status {
    ACTIVE @enum(value: 1)
    INACTIVE @enum(value: 0)
}

enum ClassCancelReason {
    IN_VOLUNTEER_UNAVAILABLE @enum(value: "in-volunteer-unavailable")
    IN_VOLUNTEER_ENGAGED @enum(value: "in-volunteer-engaged")
    IN_VOLUNTEER_UNASSIGNED @enum(value: "in-volunteer-unassigned")
    IN_OTHER @enum(value: "in-other")
    EXT_CHILDREN_OUT @enum(value: "ext-children-out")
    EXT_CHILDREN_DOING_CHORES @enum(value: "ext-children-doing-chores")
    EXT_CHILDREN_HAVE_EVENTS @enum(value: "ext-children-have-events")
    EXT_CHILDREN_UNWELL @enum(value: "ext-children-unwell")
    EXT_OTHER @enum(value: "ext-other")
    EXT_PARENT_VISITING_SHELTER @enum(value: "ext-parent-visiting-shelter")
    EXT_HOLIDAY @enum(value: "ext-holiday")
    EXT_OUT_SCHOOL @enum(value: "ext-out-school")
    EXT_DISTURBANCES_CITY @enum(value: "ext-disturbances-city")
}
