swagger: "2.0"
info:
  version: "1.0"
  title: "MADApp API"
  description: |
    Core API will create an __centralized API for all operations on MAD__ Database. We'll hand over the API docs to any external party who will be developing apps for us.

    * Responses will be follow [JSend conventions](http://labs.omniti.com/labs/jsend)
    * [Coversheet](https://docs.google.com/document/d/19OeIL2O_PAaDMjMx_ZdL2eTp2pmtZ1EUDDrWmRfScAE)
    * [Reference Document](https://docs.google.com/document/d/1YgDsgXaLp5HERyIkqpBCSs398C1xc54cE1Th6shs17o)
    * [Example Calls](https://documenter.getpostman.com/view/2544548/S1LsZW8A)

    You'll requrie a user account given by the MAD Tech team to make any calls to this API.

host: makeadiff.in
basePath: /api/v1/
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []

# TODO: Break into smaller files - https://azimi.me/2015/07/16/split-swagger-into-smaller-files.html
# To create docs, use this command
# bootprint openapi <swagger.yaml> <output_folder>
#     bootprint should be installed for this to work - use 'sudo npm install -g spectacle-docs' to install bootprint.
# OR
# spectacle -d <swagger.yaml>
#     spectacle should be installed for this to work - use 'sudo npm install -g spectacle-docs' to install spectacle.
# OR - and this is my prefered way...
# Just access the doc.html file in this folder. It dynamically reads the YAML file and creates a view for the docs.

paths:
  ############################### User
  /users:
    get:
      tags:
        - user
      summary: User Search
      description: Search interface for users. Use any of the given parameters to search/filter the user table. The final result will be returned.
      parameters:
        - name: name
          in: query
          type: string
          description: Search by user name
        - name: phone
          in: query
          type: string
          description: Search by phone number
        - name: email
          in: query
          type: string
          description: Search users by given email
        - name: mad_email
          in: query
          type: string
          description: Search users by just the mad email
        - name: identifier
          in: query
          type: string
          description: This will try to get a match by searching email, phone number, mad_email and the ID field against the given value. If any of it matches, it returns that row.
        - name: group_id
          in: query
          type: integer
          description: Return all users of the given group
        - name: groups_in
          in: query
          type: string
          description: Returns all users in any of the given group. Can give an array - eg. groups_in=3,5,9
        - name: vertical_id
          in: query
          type: integer
          description: Return all users of the given vertical
        - name: only_main_group
          in: query
          type: integer
          description: If this is '1' returns only the users having the given vertical id/group id as the main role. This can be used only if vertical_id OR group_id is given too.
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all users in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: center_id
          in: query
          type: integer
          description: Returns all users assigned to the given shelter.
        - name: user_type
          in: query
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
          description: Can be 'volunteer', 'applicant', 'let_go' or 'alumnai'.
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the teachers in the given center.
      responses:
        '200':
          description: Returns the list of users according to the given parameters.
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - user
      summary: Create new User
      description: Use this call to create new user.
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the user
          # example: Bruce Wayne
        - name: phone
          in: formData
          type: string
          required: true
          description: Phone number
          # example: "911911911"
        - name: email
          in: formData
          type: string
          required: true
          description: Email
          # example: "bruce@wayne-enterprises.com"
        - name: mad_email
          type: string
          in: formData
          description: "MAD Email - if they are a fellow or above, they'll have this."
        - name: password
          type: string
          in: formData
          description: "Password for the user. If registering on site, set this to 'pass'"
          # example: "iambatman"
        - name: joined_on
          type: string
          format: "date-time"
          in: formData
          description: The date they joined
          # example: "2009-05-09 00:00:00"
        - name: city_id
          type: integer
          in: formData
          required: true
          description: ID of the city that user belongs to. Must be a valid city.
          # example: 1
        - name: center_id
          type: integer
          in: formData
          required: false
          description: ID of the shelter user is assigned to.
        - name: user_type
          in: formData
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
            - well_wisher
          description: Can be 'volunteer', 'applicant', 'well_wisher', let_go' or 'alumnai'.
          # example: volunteer
      responses:
        200:
          description: User added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /users_paginated:
    get:
      tags:
        - user
      summary: User Paginated Search
      description: Search interface for users. Use any of the given parameters to search/filter the user table. The final result will be returned. Gives result in data of 50 users per page.
      parameters:
        - name: name
          in: query
          type: string
          description: Search by user name
        - name: phone
          in: query
          type: string
          description: Search by phone number
        - name: email
          in: query
          type: string
          description: Search users by given email
        - name: mad_email
          in: query
          type: string
          description: Search users by just the mad email
        - name: identifier
          in: query
          type: string
          description: This will try to get a match by searching email, phone number, mad_email and the ID field against the given value. If any of it matches, it returns that row.
        - name: group_id
          in: query
          type: integer
          description: Return all users of the given group
        - name: groups_in
          in: query
          type: string
          description: Returns all users in any of the given group. Can give an array - eg. groups_in=3,5,9
        - name: vertical_id
          in: query
          type: integer
          description: Return all users of the given vertical
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all users in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: center_id
          in: query
          type: integer
          description: Returns users assigned to given shelter.
        - name: user_type
          in: query
          type: string
          enum:
            - volunteer
            - applicant
            - let_go
            - alumnai
            - well_wisher
          description: Can be 'volunteer', 'applicant', 'well_wisher', 'let_go' or 'alumnai'.
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the teachers in the given center.
      responses:
        '200':
          description: Returns the list of users according to the given parameters.
          schema:            
            $ref: "#/definitions/UserPaginated"

  /users/{user_id}:
    get:
      tags:
        - user
      summary: User Information
      description: Use this to get information of any user in the system. Keep in mind that this will not return details of deleted users.
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to be found.
          required: true
          type: integer
      responses:
        '200':
          description: Returns the user details
          schema:
            $ref: "#/definitions/User"
        '404':
          description: Can't find user with given ID
    post:
      tags:
        - user
      summary: Edit User
      description: Update the user with the given ID - set any of the fields in the parameter list.
      parameters:
        # Another option of doing this.
        # - name: user
        #   in: body
        #   description: User details to update
        #   schema:
        #       $ref: "#/definitions/User"
        - name: user_id
          in: path
          type: integer
          description: The ID of the user who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: email
          in: formData
          type: string
          description: If you want to change the email id associated with this account, use this field
        - name: phone
          in: formData
          type: string
          description: Phone number of the user.
        - name: mad_email
          in: formData
          type: string
          description: makeadiff.in email id. All users who are fellow or up will have this.
        - name: joined_on
          in: formData
          type: string
          format: "date-time"
          description: The date the user joined MAD
        - name: left_on
          in: formData
          type: string
          format: "date"
          description: The date user left MAD. Don't include this field if the user is still a volunteer
        - name: address
          in: formData
          type: string
          description: Address of the user
        - name: center_id
          in: formData
          type: integer
          description: ID of the shelter the user is assigned to.
        - name: sex
          in: formData
          type: string
          enum: [m,f,o]
          description: Sex of the user - can be "m", "f" or "o"
        - name: user_type
          in: formData
          type: string
          enum: [applicant,volunteer,let_go,alumnai]
          description: User Type of the user - they will only be active if this is set to 'volunteer'.
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any user with the given {user_id}

    delete:
      tags:
        - user
        - delete
      summary: Delete User
      description: Sets the status of the given user to '0' - makes this user un-accessable.
      parameters:
        - name: user_id
          in: path
          type: integer
          description: The id of the user to be deleted.
          required: true
      responses:
        200:
          description: User was deleted
        404:
          description: Couldn't find the user with the given {user_id}

  /users/{user_id}/groups:
    get:
      tags:
        - user
        - group
      summary: User Groups of an user
      description: Return all the groups of the given user ID.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user with the given ID.
    post:
      tags:
        - user
        - group
      summary: Bulk edit User Groups of an user
      description: "Updates the user with the given user groups. Give all the User Groups of this user as a JSON string in the body. Example - `[{group_id: 1, main: 1}, {group_id: 277, main: 0}]`"
      requestBody:
        description: Give all the User Groups of the user as JSON object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/UserGroups'
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user with the given ID.

  /users/{user_id}/groups/{group_id}:
    post:
      tags:
        - user
        - group
      summary: Add User to group.
      description: Add the user to the given User Group.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: group_id
          type: integer
          in: path
          required: true
          description: ID of the Group
        - name: main 
          type: integer
          in: formData
          required: false
          description: Indicates if the group is the main group of the user. Has to be '1' or '0'. User can have only 1 main group.
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user or group with the given ID.
    delete:
      tags:
        - user
        - group
      summary: Remove User from Group
      description: Unset the user group connection for the given user and group.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: group_id
          type: integer
          in: path
          required: true
          description: ID of the Group
      responses:
        200:
          description: Ok
        404:
          description: Can't find user or the group.

  /users/{user_id}/donations:
    get:
      tags:
        - user
        - donation
        - donut
      summary: Donations raised by User
      description: Returns all the donations that the given user has raised.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: from
          type: string
          format: date
          in: query
          description: Date from which the donations should be fetched. All donations made AFTER this date will be returned.
        - name: to
          type: string
          format: date
          in: query
          description: All donations made BEFORE this date will be returned.
      responses:
        200:
          description: Returns the donations of the given user
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Donation"
        404:
          description: Can't find any user with the id {user_id}

  /users/{user_id}/credit:
    get:
      tags:
        - user
        - credit
      summary: Credit of User
      description: Returns the credit of the user with given ID
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Returns the credit of the user
        404:
          description: Can't find any user with the id {user_id}

    post:
      tags:
        - user
        - credit
      summary: Edit the credit of User
      description: Edit the credit of the user - make sure you provide a rational along with the new credit.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
        - name: credit
          type: number
          in: formData
          required: true
          description: New credit of the user
        - name: updated_by_user_id
          type: integer
          in: formData
          required: true
          description: ID of the user updating the credit
        - name: reason
          type: string
          in: formData
          required: true
          description: Reason for the credit update.
      responses:
        200:
          description: Credit edited.
        404:
          description: Can't find user with the id {user_id}
        400:
          description: Invalid data - required fields missing or in wrong format.

  /users/{user_id}/credit_history:
    get:
      tags:
        - user
        - credit
      summary: Credit history of given user.
      description: Returns the entire history of credit changes for the given user.
      parameters:
        - name: user_id
          in: path
          description: ID of the user who's history we want
          required: true
          type: integer
      responses:
        200:
          description: Ok
        404:
          description: No user fonud with that User ID.

  /users/{user_id}/classes:
    get:
      tags:
        - user
      summary: Class history of user for the current year.
      description: Returns the class history of the given user for the current year.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user who's history we want
          type: integer
      responses:
        200:
          description: Ok

  /users/{user_id}/past_classes:
    get:
      tags:
        - user
      summary: Class history of user.
      description: Returns the class history of the given user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user who's history we want
          type: integer
      responses:
        200:
          description: Ok

  /users/login:
    post:
      tags:
        - user
        - auth
      summary: User Authentication
      description: Logs user into the system
      parameters:
        - name: email
          in: query
          description: The email id for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: User Logged into the system.
        '400':
          description: Invalid username/password supplied
  #/users/logout:
  #  get:
  #    tags:
  #      - user
  #      - auth
  #    description: Logs out current logged in user session
  #    parameters: []
  #    responses:
  #      default:
  #        description: User logged out.

  /users/{user_id}/devices:
    get:
      tags:
        - user
        - device
      summary: Get all the devices associated with the given user
      description: Return the active FCM tokens for all the deviced associated with the current user. This is used to send push notifications.
      parameters:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's FCM token should be returned.
        - name: status
          in: query
          description: Use this with status=0 if you want to get inactive tokens.
      responses:
        200:
          description: List of all devices associated with this user
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Device"
        404:
          description: User with given {user_id} not found.
    post:
      tags:
        - user
        - device
      summary: Add a new device with the given FCM token to the given user.
      description: This will take a user_id and FCM token, look up the DB if there is a existing device for it. If so, activate that device. If not, add that device.
      parameter:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's FCM token was created.
        - name: token
          in: formData
          required: true
          description: FCM Token that needs to be saved with the device associated to this user.
        - name: name
          in: formData
          descritpion: Name given to this device. Optional. Can be browser name, phone imei, etc.
      responses:
        200:
          description: Assigned the FCM Token to given user device
          schema:
            $ref: "#/definitions/Device"
        400:
          description: Error in input.
  /users/{user_id}/devices/{token}:
    post:
      tags:
        - user
        - device
      summary: Add a new device with the given FCM token to the given user.
      description: This will take a user_id and FCM token, look up the DB if there is a existing device for it. If so, activate that device. If not, add that device.
      parameter:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's FCM token was created.
        - name: token
          in: path
          type: string
          required: true
          description: FCM Token that needs to be saved with the device associated to this user.
      responses:
        200:
          description: Assigned the FCM Token to given user device
          schema:
            $ref: "#/definitions/Device"
        400:
          description: Error in input.
    delete:
      tags:
        - user
        - device
      summary: Deactivates a device with the given FCM token of the given user.
      description: This will deactivate the device(status=0) with the given FCM token and user
      parameter:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's device is to be deactivated
        - name: token
          in: path
          required: true
          description: FCM Token of the device that should be deactivated
      responses:
        200:
          description: Device deactivated
        404:
          description: Can't find a device of the user with the given FCM token.

  /users/{user_id}/alerts:
    get:
      tags:
        - user
        - alert
      summary: Alerts for given user
      description: Return all the alerts associated with the given user.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user with the given ID.
  /users/{user_id}/links:
    get:
      tags:
        - user
        - link
      summary: Links for the user
      description: Return all support links for the given user based on their groups, verticals, shelters and city.
      parameters:
        - name: user_id
          type: integer
          in: path
          required: true
          description: ID of the user
      responses:
        200:
          description: Ok
        404:
          description: Can't find any user with the given ID.

  /users/{user_id}/data/{data_name}:
    get:
      tags:
        - user
        - data
      summary: Get data point about the user who's ID is given
      description: Returns the provided data point of the user with the given user_id.
      parameters:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's data point should be returned.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be returned. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given user/data point name combo will be returned.
        404:
          description: Given user_id / data point name can't be found in database.
    post:
      tags:
        - user
        - data
      summary: Save the data point to the given user
      description: This lets you set any give data point to any user.
      parameters:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
        - name: data
          in: query
          type: string
          required: true
          description: The data that should be set to the user/data point name pair. This is the value part.
      responses:
        '200':
          description: Data point of the given user/data point name combo will be set.
        404:
          description: Given user_id / data point name can't be found in database.
    delete:
      tags:
        - user
        - data
        - delete
      summary: Delete the data point of the given user
      description: This lets you delete any given data point of any user.
      parameters:
        - name: user_id
          in: path
          type: integer
          required: true
          description: The ID of the user who's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given user/data point name combo is deleted.
        404:
          description: Given user_id / data point name can't be found in the database.

  ########################################### Cities
  /cities:
    get:
      tags:
        - city
      summary: Returns all cities
      description: Gets list of all the cities in the system.
      parameters: []
      responses:
        200:
          description: Returns list of cities where MAD is operational in
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"

  /cities/{city_id}:
    get:
      tags:
        - city
      summary: City Information
      description: Returns the details of the city who's ID is given.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city to fetch
      responses:
        200:
          description: OK

  /cities/{city_id}/users:
    get:
      tags:
        - user
        - city
      summary: Users in City
      description: Return all active users in the city with the given ID.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of users
        404:
          description: Can't find any city with the given city ID

  /cities/{city_id}/teachers:
    get:
      tags:
        - user
        - city
        - teacher
      summary: Teachers in a city
      description: Return all the teachers in the given city
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
        - name: project_id
          in: query
          type: integer
          description: Returns teachers of this project. If not given, defaults to 1(Ed Support)
      responses:
        200:
          description: Returns the list of teachers
        404:
          description: Can't find any city with the given city ID

  /cities/{city_id}/fellows:
    get:
      tags:
        - user
        - city
        - fellow
      summary: Fellows in a city
      description: Return all the fellows in the given city. This includes the City Team Leads and Shelter Ops Fellows as well.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: ID of the city
      responses:
        200:
          description: Returns the list of fellows
        404:
          description: Can't find any city with the given city ID

  /cities/{city_id}/centers:
    get:
      tags:
        - city
        - center
      summary: Centers in a city.
      description: Returns the list of all centers in the given city.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: City ID
      responses:
        200:
          description: Returns all centers.
        404:
          description: Can't find city with given ID.

  /cities/{city_id}/students:
    get:
      tags:
        - city
        - student
      summary: Students in a city.
      description: Returns the list of all students in the given city.
      parameters:
        - name: city_id
          in: path
          required: true
          type: integer
          description: City ID
      responses:
        200:
          description: Returns all students.
        404:
          description: Can't find city with given ID.

  ###################################### Group
  # :TODO: - this is now a search operation. Search for 'id', 'name','type','vertical_id'.
  /groups:
    get:
      tags:
        - group
      summary: All Groups.
      description: Returns all the groups currently active.
      parameters:
        - name: id 
          in: query
          required: false
          type: integer
          description: Group ID
        - name: name 
          in: query
          required: false
          type: string
          description: Group Name
        - name: type
          in: query
          required: false
          type: string
          description: Group Type, will be either national, fellow, volunteer, executive, strat
        - name: vertical_id
          in: query
          required: false
          type: integer
          description: Vertical ID the group belongs to
        - name: type_in
          in: query
          required: false
          type: string
          description: Comma Separated group types.
      responses:
        200:
          description: Ok

  /group_types:
    get:
      tags:
        - group
      summary: All Group Types
      description: Returns all the groups types currently active.
      responses: 
        200:
          description: Ok

  /groups/{group_id}:
    get:
      tags:
        - group
        - single
      summary: Information about a User Group
      description: Returns the details of the group of the given ID
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
          description: Group ID
      responses:
        200:
          description: Ok
        404:
          description: Group not found.

  /verticals:
    get:
      tags:
        - vertical
      summary: All Verticals
      description: Returns all the verticals currently active.
      responses:
        200:
          description: Ok

  /projects:
    get:
      tags:
        - project
      summary: All projects.
      description: Returns all the projects currently active.
      responses:
        200:
          description: Ok
  ###################################### Center
  /centers:
    get:
      tags:
        - center
      summary: Search Centers.
      description: Returns a list of all centers matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by Center name
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all centers in the given city.
      responses:
        200:
          description: Ok
    # post:
    #   description: Create a new center.
    #   parameters:
    #     - name: name
    #       in: query
    #       type: string
    #       required: true
    #       description: Search by Center name
    #     - name: city_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: Return all centers in the given city.
    #     - center_head_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: The Shelter Operations Fellow's user ID.
    #   responses:
    #     200:
    #       description: Ok

  /centers/{center_id}:
    get:
      tags:
        - center
        - single
      summary: Information about a center.
      description: Returns the details of the center who's ID is given
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID
    # post:
    #   description: Edit the given center.
    #   parameters:
    #     - name: name
    #       in: query
    #       type: string
    #       required: true
    #       description: Search by Center name
    #     - name: city_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: Return all centers in the given city.
    #     - center_head_id
    #       in: query
    #       type: integer
    #       required: true
    #       description: The Shelter Operations Fellow's user ID.
    #   responses:
    #     200:
    #       description: Ok
    #     404:
    #        description: Can't find any centers with the given ID
    # delete:
    #   description: Deletes the given center.
    #   responses:
    #     200:
    #       description: Ok
    #     404:
    #        description: Can't find any centers with the given ID

  /centers/{center_id}/teachers:
    get:
      tags:
        - user
        - teacher
        - center
      summary: Teachers in given center.
      description: Returns the teachers assigned to the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/students:
    get:
      tags:
        - student
        - center
      summary: Students in given center.
      description: Returns the students in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/levels:
    get:
      tags:
        - level
        - center
      summary: Levels in given center.
      description: Returns the levels/class sections. in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
        - name: project_id
          in: query
          type: string
          enum: [1,2]
          description: ID of the program of which levels should be returned. Value can be 1 or 2 - Ed Support or Foundation. Defaults to 1(Ed Support)
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/batches:
    get:
      tags:
        - batch
        - center
      summary: Batches in given center.
      description: Returns the batches in the given center.
      parameters:
        - name: center_id
          in: path
          type: integer
          description: ID of the center
          required: true
        - name: project_id
          in: query
          type: string
          enum: [1,2]
          description: ID of the program of which batches should be returned. Value can be 1 or 2 - Ed Support or Foundation. Defaults to 1(Ed Support)
      responses:
        200:
          description: Ok
        404:
          description: Can't find any centers with the given ID

  /centers/{center_id}/data/{data_name}:
    get:
      tags:
        - center
        - data
      summary: Get data point about the center who's ID is given
      description: Returns the provided data point of the center with the given center_id.
      parameters:
        - name: center_id
          in: path
          type: integer
          required: true
          description: The ID of the center who's data point should be returned.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be returned. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given center/data point name combo will be returned.
        404:
          description: Given center_id / data point name can't be found in database.
    post:
      tags:
        - center
        - data
      summary: Save the data point to the given center
      description: This lets you set any give data point to any center.
      parameters:
        - name: center_id
          in: path
          type: integer
          required: true
          description: The ID of the center who's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
        - name: data
          in: query
          type: string
          required: true
          description: The data that should be set to the center/data point name pair. This is the value part.
      responses:
        '200':
          description: Data point of the given center/data point name combo will be set.
        404:
          description: Given center_id / data point name can't be found in database.
    delete:
      tags:
        - center
        - data
        - delete
      summary: Delete the data point of the given center
      description: This lets you delete any given data point of any center.
      parameters:
        - name: center_id
          in: path
          type: integer
          required: true
          description: The ID of the center of which's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given center/data point name combo is deleted.
        404:
          description: Given center_id / data point name can't be found in the database.

  /centers/{center_id}/comments:
    get:
      tags:
        - center
        - comment
      summery: Center comments
      description: Returns all the comments made about the center with the given ID.
      parameters:
        - name: center_id
          in: path
          type: integer
          required: true
          description: ID of the center we should find the comments for.
      responses:
        200:
          description: Comments fetched and provided
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        404:
          description: Can't find any Center with given ID.
    post:
      tags:
        - center
        - comment
      summery: Add a comment to the center
      description: Adds a new comment made to the center with the given ID.
      parameters:
        - name: center_id
          in: path
          type: integer
          required: true
          description: ID of the center we should find the comments for.
        - name: comment
          in: formData
          type: string
          required: true
          description: The text of the comment
        - name: added_by_user_id
          in: formData
          type: integer
          required: true
          description: The ID of the user who is making the comment.
      responses:
        200:
          description: Comment added successfully
        404:
          description: Can't find any Center with given ID.
  /centers/{center_id}/comments/{comment_id}:
    delete:
      tags:
        - center
        - comment
      summery: Delete a Center comment
      description: Deletes a center comment with given ID
      parameters:
        - name: center_id
          in: path
          type: integer
          required: true
          description: ID of the center we should find the comments for.
        - name: comment_id
          in: path
          type: integer
          required: true
          description: ID of the comment that should be deleted.
      responses:
        200:
          description: Comment deleted
        404:
          description: Can't find any Center or comment with given ID.

  /students/{student_id}/comments:
    get:
      tags:
        - student
        - comment
      summery: Student Comments
      description: Returns all the comments made about the student with the given ID.
      parameters:
        - name: student_id
          in: path
          type: integer
          required: true
          description: ID of the student we should find the comments for.
      responses:
        200:
          description: Comments fetched and provided
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
        404:
          description: Can't find any student with given ID.
    post:
      tags:
        - student
        - comment
      summery: Add a comment to the student
      description: Adds a new comment made to the student with the given ID.
      parameters:
        - name: student_id
          in: path
          type: integer
          required: true
          description: ID of the student we should find the comments for.
        - name: comment
          in: formData
          type: string
          required: true
          description: The text of the comment
        - name: added_by_user_id
          in: formData
          type: integer
          required: true
          description: The ID of the user who is making the comment.
      responses:
        200:
          description: Comment added successfully
        404:
          description: Can't find any student with given ID.
  /students/{student_id}/comments/{comment_id}:
    delete:
      tags:
        - student
        - comment
      summery: Delete a student comment
      description: Deletes a student comment with given ID
      parameters:
        - name: student_id
          in: path
          type: integer
          required: true
          description: ID of the student we should find the comments for.
        - name: comment_id
          in: path
          type: integer
          required: true
          description: ID of the comment that should be deleted.
      responses:
        200:
          description: Comment deleted
        404:
          description: Can't find any student or comment with given ID.

  ############################### Students

  /students:
    get:
      tags:
        - student
        - search
      summary: Student search.
      description: Returns a list of all students matching given parameters
      parameters:
        - name: name
          in: query
          type: string
          description: Search by name
        - name: city_id
          in: query
          type: integer
          required: false
          description: Return all students in the given city. If ommited the city of the user who's login is used to access the api is assumed.
        - name: center_id
          in: query
          type: integer
          required: false
          description: Returns all the students in the given center.
        - name: sex
          in: query
          type: string
          enum: [m,f]
          required: false
          description: Returns all the students who are of the given gender. Can be 'm' or 'f'.
      responses:
        '200':
          description: Returns the list of students according to the given parameters.
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Student"
        '404':
          description: Did not find any students matching the given parameters
    post:
      tags:
        - student
      summary: Create new student
      description: Create a new student with the data given in the body.
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the Student
        - name: sex
          in: formData
          type: string
          enum: [m,f]
          description: Sex of the student - 'm' or 'f'.
        - name: center_id
          type: integer
          in: formData
          required: true
          description: ID of the Center that student belongs to. Must be a valid center.
      responses:
        200:
          description: Student added successfully.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /students/{student_id}:
    get:
      tags:
        - student
      summary: Student Information
      description: Returns the student who's ID is given
      parameters:
        - name: student_id
          in: path
          description: The ID of the student to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the student details
          schema:
            $ref: "#/definitions/Student"
        404:
          description: Can't find student with given ID
        400:
          description: Invalid ID format - did you put alphabets into the ID?
    post:
      tags:
        - student
      summary: Edit student
      description: Edit details of the given student
      parameters:
        - name: student_id
          in: path
          type: integer
          description: The ID of the student who has to be edited
          required: true
        - name: name
          in: formData
          type: string
          description: If you want to edit the name of the volunteer, provide the new name here.
        - name: sex
          in: formData
          type: string
          description: Sex of the student - can be "m", "f" or "u"
      responses:
        200:
          description: User edited with given data
        404:
          description: Can't find any student with the given {student_id}

    delete:
      tags:
        - student
      summary: Delete Student
      description: Deletes the student with the given ID
      parameters:
        - name: student_id
          in: path
          type: integer
          description: The id of the student to be deleted.
          required: true
      responses:
        200:
          description: Student was deleted
        404:
          description: Couldn't find the student with the given {student_id}

  /students/{student_id}/data/{data_name}:
    get:
      tags:
        - student
        - data
      summary: Get data point about the student who's ID is given
      description: Returns the provided data point of the student with the given student_id.
      parameters:
        - name: student_id
          in: path
          type: integer
          required: true
          description: The ID of the student who's data point should be returned.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be returned. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given student/data point name combo will be returned.
        404:
          description: Given student_id / data point name can't be found in database.
    post:
      tags:
        - student
        - data
      summary: Save the data point to the given student
      description: This lets you set any give data point to any student.
      parameters:
        - name: student_id
          in: path
          type: integer
          required: true
          description: The ID of the student who's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
        - name: data
          in: query
          type: string
          required: true
          description: The data that should be set to the student/data point name pair. This is the value part.
      responses:
        '200':
          description: Data point of the given student/data point name combo will be set.
        404:
          description: Given student_id / data point name can't be found in database.
    delete:
      tags:
        - student
        - data
        - delete
      summary: Delete the data point of the given student
      description: This lets you delete any given data point of any student.
      parameters:
        - name: student_id
          in: path
          type: integer
          required: true
          description: The ID of the student who's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given student/data point name combo is deleted.
        404:
          description: Given student_id / data point name can't be found in the database.

  ############################# Level
  /levels:
    post:
      tags:
        - level
      summary: Create Level
      description: Creates a new level with given data
      parameters:
        - name: grade
          type: integer
          in: formData
          required: true
          description: The grade of the class section/level - 5-10. 13 for Aftercare.
        - name: name
          type: string
          in: formData
          required: true
          description: Name associated with the level - used to split up gardes - like 7 A, 7 B, 7 C. Here A/B/C are the names.
        - name: medium
          type: string
          enum:
            - vernacular
            - english
          in: formData
          required: false
          description: Which medium is used to teach this class section/level.
        - name: preferred_gender
          type: string
          enum:
            - male
            - female
            - any
          in: formData
          required: false
          description: Is there a gender requirement from the Shelter authority end for volunteers in this level? If so, which gender.
        - name: center_id
          type: integer
          in: formData
          required: true
          description: The ID of the shelter that this level belongs to.
        - name: project_id
          type: integer
          in: formData
          required: true
          description: The ID of the project of this level.
        - name: year
          type: integer
          in: formData
          required: false
          description: Year when this level was active. If not given, defaults to current active year.
      responses:
        200:
          description: Level updated successfully
          schema:
            $ref: "#/definitions/Level"
        400:
          description: Errors in input - more details in the response body
        404:
          description: Can't find any level with the given ID

  /levels/{level_id}:
    get:
      tags:
        - level
      summary: Level information
      description: Returns the details of the level with the given ID
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level that should be found.
      responses:
        200:
          description: Details of the level will be returned.
          schema:
            $ref: "#/definitions/Level"
        404:
          description: Can't find any level with the given {level_id}
    post:
      tags:
        - level
      summary: Update Level
      description: Update details of the level whose ID is given
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level that should be edited.
        - name: grade
          type: integer
          in: formData
          required: true
          description: The grade of the class section/level - 5-10. 13 for Aftercare.
        - name: name
          type: string
          in: formData
          required: true
          description: Name associated with the level - used to split up gardes - like 7 A, 7 B, 7 C. Here A/B/C are the names.
        - name: medium
          type: string
          enum:
            - vernacular
            - english
          in: formData
          required: false
          description: Which medium is used to teach this class section/level.
        - name: preferred_gender
          type: string
          enum:
            - male
            - female
            - any
          in: formData
          required: false
          description: Is there a gender requirement from the Shelter authority end for volunteers in this level? If so, which gender.
        - name: center_id
          type: integer
          in: formData
          required: false
          description: The ID of the shelter that this level belongs to.
        - name: project_id
          type: integer
          in: formData
          required: false
          description: The ID of the project of this level.
        - name: year
          type: integer
          in: formData
          required: false
          description: Year when this level was active. If not given, defaults to current active year.
      responses:
        200:
          description: Level updated successfully
          schema:
            $ref: "#/definitions/Level"
        400:
          description: Errors in input - more details in the response body
        404:
          description: Can't find any level with the given ID
    delete:
      tags:
        - level
      summary: Delete level
      description: Soft deletes the level whose ID is given
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level that should be deleted.
      responses:
        200:
          description: Level deleted successfully
        404:
          description: Can't find any level with the given {batch_id}

  /levels/{level_id}/students:
    get:
      tags:
        - student
        - level
      summary: Students in Level
      description: Returns the students mapped to the given level.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
      responses:
        200:
          description: List of all the students in that level.
          schema:
            $ref: "#/definitions/Student"
        404:
          description: Can't find any level with the given {level_id}
    post:
      tags:
        - student
        - level
      summary: Assign students to level
      description: Assign multiple students to a given level/class section.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
        - name: student_ids
          type: string
          in: formData
          required: true
          description: Comma seperated list of students that have to be assigned to this class section.
      responses:
        200:
          description: Assigned students to the level successfully
          schema:
            $ref: "#/definitions/Level"
        404:
          description: Can't find any level with given level_id

  /levels/{level_id}/students/{student_id}:
    delete:
      tags:
        - student
        - level
      summary: Unassign Students from Level
      description: Deletes a student/level mapping. The student will no longer be a part of that level.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
        - name: student_id
          type: integer
          in: path
          required: true
          description: ID of the student
      responses:
        200:
          description: Student unassigned successfully
        404:
          description: Can't find any {level_id}/{student_id} assignment

  /levels/{level_id}/batches:
    get:
      tags:
        - batch
        - level
      summary: Batches in level
      description: Returns the batches mapped to the given level.
      parameters:
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
      responses:
        200:
          description: List of all the batches in the given level.
          schema:
            $ref: "#/definitions/Batch"
        404:
          description: Can't find any level with the given {level_id}


  ######################## Batches
  /batches:
    post:
      tags:
        - batch
      summary: Create Batch
      description: Create a new batch with the given details
      parameters:
        - name: day
          type: integer
          in: formData
          required: true
          description: Day of the batch - 0 for sunday, 6 for saturday.
        - name: class_time
          type: string
          in: formData
          required: true
          description: Time of the class - 'hh:mm:ss' format.
        - name: center_id
          type: integer
          in: formData
          required: true
          description: The ID of the shelter that this batch belongs to.
        - name: project_id
          type: integer
          in: formData
          required: true
          description: The ID of the project of this batch.
        - name: year
          type: integer
          in: formData
          required: false
          description: Year when this batch was active.
        - name: mentor_user_ids
          type: integer
          in: formData
          required: false
          description: A comma separated list of User IDs of the mentor of the batch
      responses:
        200:
          description: Batch created successfully
        400:
          description: Error in input - more details will be given in the response.

  /batches/{batch_id}:
    get:
      tags:
        - batch
      summary: Batch information
      description: Returns the details of the batch with the given ID
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch that should be found.
      responses:
        200:
          description: Details of the batch will be returned.
          schema:
            $ref: "#/definitions/Batch"
        404:
          description: Can't find any batch with the given {batch_id}
    post:
      tags:
        - batch
      summary: Update Batch
      description: Edits the details of the batch with the given ID
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch that should be found.
        - name: day
          type: integer
          in: formData
          required: true
          description: Day of the batch - 0 for sunday, 6 for saturday.
        - name: class_time
          type: string
          in: formData
          required: true
          description: Time of the class - 'hh:mm:ss' format.
        - name: center_id
          type: integer
          in: formData
          required: false
          description: The ID of the shelter that this batch belongs to.
        - name: project_id
          type: integer
          in: formData
          required: false
          description: The ID of the project of this batch.
        - name: year
          type: integer
          in: formData
          required: false
          description: Year when this batch was active.
        - name: mentor_user_ids
          type: integer
          in: formData
          required: false
          description: A comma separated list of User IDs of the mentor of the batch
      responses:
        200:
          description: Batch updated successfully
        400:
          description: Error in input - more details will be given in the response.
        404:
          description: Can't find any batch with the given {batch_id}
    delete:
      tags:
        - batch
      summary: Delete given batch
      description: Soft deletes the batch whose ID is given
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch that should be delted.
      responses:
        200:
          description: Batch deleted successfully
        404:
          description: Can't find any batch with the given {batch_id}

  /batches/{batch_id}/teachers:
    get:
      tags:
        - batch
        - teacher
        - user
      summary: Teachers in batch
      description: Returns the teachers mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
      responses:
        200:
          description: List of all the teachers in that batch.
          schema:
            $ref: "#/definitions/User"
        404:
          description: Can't find any batch with the given {batch_id}

  /batches/{batch_id}/mentors:
    get:
      tags:
        - batch
        - user
        - mentor
      summary: Mentors in batch
      description: Returns the mentos mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
      responses:
        200:
          description: List of all the mentors in that batch.
          schema:
            $ref: "#/definitions/User"
        404:
          description: Can't find any batch with the given {batch_id}
    post:
      tags:
        - batch
        - user
        - mentor
      summary: Add Mentors to given batch
      description: Returns the mentos mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
        - name: mentor_user_ids
          type: integer
          in: formData
          required: true
          description: A comma separated list of User IDs of the mentor of the batch
      responses:
        200:
          description: Adds mentors to the Batch.
        404:
          description: Can't find any batch with the given {batch_id}

  /batches/{batch_id}/mentors/{mentor_user_id}:
    delete:
      tags:
        - batch
        - mentor
        - user
      summary: Delete Mentors from batch
      description: Returns the mentos mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
        - name: mentor_user_id
          type: integer
          in: path
          required: true
          description: The ID of the mentor of the batch
      responses:
        200:
          description: Adds mentors to the Batch.
        404:
          description: Can't find any batch with the given {batch_id}

  /batches/{batch_id}/levels/{level_id}/teachers:
    get:
      tags:
        - batch
        - level
        - teacher
        - allocation
      summary: Teachers in given Batch/Level
      description: Returns the list of teachers mapped to the given batch/level combo.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
      responses:
        200:
          description: List of all the teachers in that batch/Level.
          schema:
            $ref: "#/definitions/User"
        404:
          description: Can't find any batch or level with the given ID
    post:
      tags:
        - batch
        - level
        - teacher
        - allocation
      summary: Assign Teachers to a Batch/Level
      description: Assign multiple teachers to a Batch/Level Combo.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
        - name: user_ids
          type: string
          in: formData
          required: true
          description: A comma seperated list of the user IDs of the teachers to be assigned to this batch/level combo.
      responses:
        200:
          description: Added the teachers to the batch/level combo
          schema:
            $ref: "#/definitions/Batch"
        404:
          description: Can't find any batch, level, or users with the given ID
  /batches/{batch_id}/levels/{level_id}/teachers/{teacher_id}:
    post:
      tags:
        - batch
        - level
        - teacher
        - allocation
      summary: Assign a single teacher to a Batch/Level
      description: Assigns a teacher to a Batch/Level combo - with the subject they are taking.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
        - name: teacher_id
          type: integer
          in: path
          required: true
          description: User ID of Teacher that needs to be added to the Batch/Level
        - name: subject_id
          type: integer
          in: formData
          required: false
          description: The subject ID that the teacher will be handling in this batch/level
      responses:
        200:
          description: Assigned the teacher to the batch/level combo
        400:
          description: Failed creating teh assignment. 
    delete:
      tags:
        - batch
        - level
        - teacher
        - allocation
      summary: Delete Teacher from a Batch/Level
      description: Delete a teacher to a Batch/Level Combo.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
        - name: level_id
          type: integer
          in: path
          required: true
          description: ID of the level
        - name: teacher_id
          type: integer
          in: path
          required: true
          description: User ID of Teacher that needs to be removed from the Batch/Level
      responses:
        200:
          description: Removed the teacher from the batch/level combo
          schema:
            $ref: "#/definitions/Batch"
        404:
          description: Can't find any batch, level, or users with the given ID

  /batches/{batch_id}/levels:
    get:
      tags:
        - batch
        - level
      summary: Levels in batch
      description: Returns the levels mapped to the given batch.
      parameters:
        - name: batch_id
          type: integer
          in: path
          required: true
          description: ID of the batch
      responses:
        200:
          description: List of all the levels in that batch.
          schema:
            $ref: "#/definitions/Level"
        404:
          description: Can't find any batch with the given {batch_id}

  /subjects:
    get:
      tags:
        - subject
        - allocation
      summary: Gets all the active subjects
      description: Returns all the subject that can be assigned to at an allocation.
      responses:
        200:
          description: List of all active subjects
          schema:
            $ref: "#/definitions/Subject"

  ############################ Classes
  /classes/{class_id}/data/{data_name}:
    get:
      tags:
        - class
        - data
      summary: Get data point about the class who's ID is given
      description: Returns the provided data point of the class with the given class_id.
      parameters:
        - name: class_id
          in: path
          type: integer
          required: true
          description: The ID of the class who's data point should be returned.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be returned. The key part of the key/value pair.
      responses:
        '200':
          description: Data point of the given class/data point name combo will be returned.
        404:
          description: Given class_id / data point name can't be found in database.

    post:
      tags:
        - class
        - data
      summary: Save the data point to the given class
      description: This lets you set any give data point to any class.
      parameters:
        - name: class_id
          in: path
          type: integer
          required: true
          description: The ID of the class who's data point should be set.
        - name: name
          in: path
          type: string
          required: true
          description: The data point that should be set. The key part of the key/value pair.
        - name: data
          in: query
          type: string
          required: true
          description: The data that should be set to the class/data point name pair. This is the value part.
      responses:
        '200':
          description: Data point of the given class/data point name combo will be set.
        404:
          description: Given class_id / data point name can't be found in database.

  ############################ Donations
  /donations:
    get:
      tags:
        - donation
        - donut
      summary: Search Donations
      description: Search thru donations of the current year using any of the listed parameters.
      parameters:
        - name: id
          in: query
          type: integer
          description: Find donation with the given ID.
        - name: city_id
          in: query
          type: integer
          description: Find donations in the given city.
        - name: amount
          in: query
          type: integer
          description: Find donations that is for the given amount
        - name: status
          in: query
          type: string
          enum:
            - deposited
            - collected
            - receipted
          description: Find donations that have this donation status.
        - name: fundraiser_user_id
          in: query
          type: integer
          description: Find donations raised by the given user
        - name: from
          type: string
          format: date
          in: query
          description: Date from which the donations should be fetched. All donations made AFTER this date will be returned.
        - name: to
          type: string
          format: date
          in: query
          description: All donations made BEFORE this date will be returned.
        - name: type
          in: query
          type: string
          enum:
            - cash
            - cheque
            - nach
            - globalgiving
            - giveindia
            - online
            - other
          description: Donation type
        - name: updated_by_user_id
          in: query
          type: integer
          description: Find donations edited by the given user.
        - name: include_deposit_info
          in: query
          type: string
          enum:
            - true
            - false
          description: Include the deposit information along with the donation data.
        - name: deposited
          in: query
          type: string
          enum:
            - true
            - false
          description: Return only deposited donations.
        - name: deposit_status_in
          in: query
          type: string
          description: Comma seperated list of possible deposit statuses.
        - name: deposit_status
          in: query
          type: string
          enum:
            - pending
            - approved
            - rejected
          description: Find donations that are in this stage of deposit.
        - name: approver_user_id
          in: query
          type: integer
          description: Find all donations approved by given user id.
      responses:
        '200':
          description: Returns the list of donations that matches the given parameters.
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Donation"

    post:
      tags:
        - donation
        - donut
      summary: Add Donation
      description: Add a new donation based on the data provided
      parameters:
        - name: donor_name
          in: formData
          type: string
          description: Name of the donor making the donation
          required: true
        - name: donor_email
          in: formData
          type: string
          description: Donor Email Address
          required: true
        - name: donor_phone
          in: formData
          type: string
          description: Donor Phone number
          required: true
        - name: donor_address
          in: formData
          type: string
          description: Donor's home address.
        - name: type
          in: formData
          required: true
          type: string
          enum:
            - cash
            - cheque
            - nach
            - globalgiving
            - giveindia
            - online
            - other
          description: ID of the user who added this donation.
        - name: fundraiser_user_id
          in: formData
          type: integer
          description: ID of the user who added this donation.
        - name: amount
          in: formData
          type: integer
          description: Amount donated
        - name: added_on
          in: formData
          type: string
          description: Time the donation was made
          format: "date-time"
        - name: comment
          in: formData
          type: string
          description: Any comments about this donation. For eg. "Donation for Dream Camp"
      responses:
        200:
          description: Donation added successfully
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /donations/{donation_id}:
    get:
      tags:
        - donation
        - donut
      summary: Donation Information
      description: Use this to get data on any given donation.
      parameters:
        - name: donation_id
          in: path
          description: The ID of the donation to be found.
          required: true
          type: integer
      responses:
        200:
          description: Returns the donation details
          schema:
            $ref: "#/definitions/Donation"
        404:
          description: Can't find donation with given ID

    delete:
      tags:
        - donation
        - donut
      summary: Delete a Donation
      description: Deletes the donation with the given ID.
      parameters:
        - name: donation_id
          in: path
          description: The ID of the donation to be found.
          required: true
          type: integer
      responses:
        200:
          description: Ok
        404:
          description: Can't find donation with given ID

  /deposits:
    get:
      tags:
        - deposit
        - donut
      summary: Deposit Search
      description: Search thru the deposits to get items the current user should review, review status, etc.
      parameters:
        - name: id
          in: query
          type: integer
          description: ID of the deposit that should be shown.
        - name: status
          in: query
          type: string
          enum:
            - approved
            - rejected
            - pending
          description: Search for all deposits that has the given status.
        - name: status_in
          in: query
          type: string
          description: Search for all deposits that matches any of the given status.
        - name: reviewer_user_id
          in: query
          type: integer
          description: Returns all the deposits that the given user has to review.
      responses:
        200:
          description: Ok
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Deposit"
    post:
      tags:
        - deposit
        - donut
      summary: Add Deposit
      description: Add new deposit with the given information.
      parameters:
        - name: collected_from_user_id
          in: query
          type: integer
          description: The ID of the user from whom the money should be collected from.
          required: true
        - name: given_to_user_id
          in: query
          type: integer
          description: The ID of the user to whom the money should be given to
          required: true
        - name: donation_ids
          in: query
          type: array
          items:
            type: integer
          description: An array of all the IDs of the donations included in this deposit.
          required: true
      responses:
        200:
          description: Created the deposit.
          schema:
            $ref: "#/definitions/Deposit"
        400:
          description: Errors in input.
  /deposits/{deposit_id}:
    post:
      tags:
        - deposit
        - donut
      summary: Approve/Reject Deposit
      description: Use this call to approve/reject any given deposit.
      parameters:
        - name: deposit_id
          in: path
          type: integer
          description: ID of the deposit to be edited.
          required: true
        - name: reviewer_user_id
          in: query
          type: integer
          description: ID of the user who is going to review the deposit.
          required: true
        - name: status
          in: query
          type: string
          enum:
            - approved
            - rejected
            - pending
          description: The deposit will be approved/rejected based on this.
          required: true
      responses:
        200:
          description: Updated the deposit
        400:
          description: Errors in input.

  /events:
    get:
      tags:
        - event
      summary: Search for events
      description: Search thru all created events. Use any of the given parameters to narrow down the list of events.
      parameters:
        - name: name
          in: query
          type: string
          description: Search for the events with the given name
        - name: description
          in: query
          type: string
          description: Search for the given text within the event description
        - name: date
          in: query
          type: string
          format: "date-time"
          description: Search for event by the date when the event starts
        - name: from_date
          in: query
          type: string
          format: "date-time"
          description: Search for event that are after or on  this date.
        - name: to_date
          in: query
          type: string
          format: "date-time"
          description: Search for event that are before or on this date.
        - name: latitude
          in: query
          type: string
          description: Search for the event by the location(latitude) of the event
        - name: longitude
          in: query
          type: string
          description: Search for the event by the location(longitude) of the event
        - name: place
          in: query
          type: string
          description: Search by the place were event is happening.
        - name: city_id
          in: query
          type: integer
          description: City of the event
        - name: type
          in: query
          type: string
          description: Search by event type.
        - name: created_by_user_id
          in: query
          type: integer
          description: Search by the user who created the event.
        - name: invited_user_id
          in: query
          typ: integer
          description: Returns all the events that the given user has been invited to.
      responses:
        200:
          description: Returns a list of all event matching the given parameters
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    post:
      tags:
        - event
      summary: Create a new event
      description: Create a new event using the given parameters
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the event
        - name: description
          in: formData
          type: string
          description: Description of the event
        - name: starts_on
          in: formData
          type: string
          format: "date-time"
          required: true
          description: The date when the event will happen
        - name: place
          in: formData
          type: string
          description: The place where the event will happen
        - name: city_id
          in: formData
          required: true
          type: integer
          description: The ID of the city where the city is happening.
        - name: event_type_id
          in: formData
          required: true
          type: integer
          description: The ID of the event type.       
        - name: created_by_user_id
          in: formData
          type: integer
          required: true
          description: ID of the user who created the event
        - name: latitude
          in: formData
          type: string
          description: Latitude of the location of the event.
        - name: longitude
          in: formData
          type: string
          description: Longitude of the location of the event.
        - name: repeat_until
          in: formData          
          type: "string"
          format: "date"
          description: End data of when the Event should repeat for. By default it'll be the end of the academic year.
        - name: frequency
          in: formData
          type: string
          description: values are 'monthly' or 'weekly'. Frequcny of Recurring of Event. Upon entering this event copies are created until end of academic year.          
      responses:
        200:
          description: New event created
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /events/{event_id}:
    get:
      tags:
        - event
      summary: Event Information
      description: Get the information of any given event.
      parameters:
        - name: event_id
          in: path
          description: The ID of event that you want to get info on.
          required: true
          type: integer
      responses:
        200:
          description: Returns the Event details
          schema:
            $ref: "#/definitions/Event"
        404:
          description: Can't find event with given ID

    post:
      tags:
        - event
      summary: Edit a given event
      description: Update the event with the specified ID
      parameters:
        - name: event_id
          in: path
          description: The ID of event that you want to get info on.
          required: true
          type: integer
        - name: name
          in: formData
          type: string
          required: true
          description: Name of the event
        - name: description
          in: formData
          type: string
          description: Description of the event
        - name: starts_on
          in: formData
          type: string
          format: "date-time"
          required: true
          description: The date when the event will happen
        - name: place
          in: formData
          type: string
          description: The place where the event will happen
        - name: city_id
          in: formData
          required: true
          type: integer
          description: The ID of the city where the city is happening.
        - name: event_type_id
          in: formData
          required: true
          type: integer
          description: The ID of the event type.        
        - name: created_by_user_id
          in: formData
          type: integer
          required: true
          description: ID of the user who created the event
        - name: latitude
          in: formData
          type: string
          description: Latitude of the location of the event.
        - name: longitude
          in: formData
          type: string
          description: Longitude of the location of the event.
      responses:
        200:
          description: Event Updated
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    delete:
      tags:
        - delete
        - event
      summary: Cancel an event
      description: Soft deletes a given event(sets the status to '0') - means it was cancelled
      parameters:
        - name: event_id
          in: path
          description: The ID of event that you want to delete.
          required: true
          type: integer
      responses:
        200:
          description: Event deleted
        404:
          description: Couldn't find the event with the given event ID.

  /events/{event_id}/recur:
    post:
      tags:
        - event
      summary: Create Recurring event instances
      description: Create instances of event until the said date of repeat_until with frequecy of weekly or monthly.
      parameters:
        - name: event_id
          in: path
          required: true
          description: The ID of event whose instances you want to recur
          type: integer
        - name: repeat_until
          in: formData          
          type: "string"
          format: "date"
          description: End data of when the Event should repeat for. By default it'll be the end of the academic year. If not present will be taken from Event.repeat_until
        - name: frequency
          in: formData
          type: string
          description: values are 'monthly' or 'weekly'. Frequcny of Recurring of Event. Upon entering this event copies are created until end of academic year. If not present will be taken from Event.frequency 

      responses:
        200:
          description: Event Instances created for Event
        404:
          description: Couldn't find the event with the given event ID.


  /event_types:
    get:
      tags: 
        - event
      summary: All Event Types
      description: This will give you a list of all the event types, namely, Volunteer Leadership Cirlce, City Circle etc.
      # parameters:
      #   - name: vertical_id
      #     in: query
      #     type: integer
      #     required: false
      #     description: Vertical ID of the events. Gives you list of Event Types for the selected vertical.
      responses:
        200:
          description: Returns the Event Types details
          schema:
            $ref: "#/definitions/Event_Type"      
        404:
          description: Can't find Event Type with the given parameter

  /events/{event_id}/users:
    get:
      tags:
        - event
      summary: Users connected to given event
      description: This will give you all the users connected to this event - the invited, attended, rsvped - all together.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event of which users shoud be returned.
        - name: present
          in: query
          type: string
          enum:
            - 1
            - 0
          description: If this parameter is given, call will only return users who were marked present at the event.
        - name: late
          in: query
          type: string
          enum:
            - 1
            - 0
          description: If this parameter is given, call will only return users who were marked late at the event. '1' will give all people who came but were late.
        - name: rsvp
          in: query
          type: string
          enum:
            - no_data
            - going
            - maybe
            - cant_go
          description: Returns all the users who have RSVPed as given value.
      responses:
        200:
          description: Returns all the users connected to the event.
          schema:
            $ref: "#/definitions/UserEvent"
        404:
          description: Can't find any event with the given ID

    post:
      tags:
        - event
      summary: Invite users to the given event
      description: Give a list of all the users who should be invited to the given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event to which users should be invited to.
        - name: invite_user_ids
          in: formData
          type: string
          required: true
          description: Comma seperated IDs of all the users that is invited to the given event.
        - name: send_invite_emails
          in: formData
          type: string
          enum: [1,0]
          description: Send event invitation emails to all the invited users. Defaults to '1'
      responses:
        200:
          description: All the given users have been invited to the event.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

  /events/{event_id}/users/{user_id}:
    get:
      tags:
        - event
      summary: Info of users connection with event
      description: Returns the info of any given user who is associated with a given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
        - name: user_id
          in: path
          type: integer
          required: true
          description: User ID who is associated to the event.
      responses:
        200:
          description: Given users have been invited
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    post:
      tags:
        - event
      summary: Update present, late, rsvp choice of user
      description: Set the present, late, rsvp fields for the given user and event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
        - name: user_id
          in: path
          type: integer
          required: true
          description: User ID who is associated to the event.
        - name: present
          in: formData
          type: string
          enum:
            - 0
            - 1
          description: Update whether the user was present or not for the given event.
        - name: late
          in: formData
          type: string
          enum:
            - 0
            - 1
          description: Update whether the user was late or not for the given event.
        - name: rsvp
          type: string
          enum:
            - no_data
            - going
            - maybe
            - cant_go
          in: formData
          description: Update the RSVP field when the user indicates a choice of going to the given event.
        - name: reason 
          type: string
          in: formData
          description: The reason why the user can't make it to the event. Only valid for rsvp:cant_go
      responses:
        200:
          description: Updated the given field for the given user in the given event.
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

    delete:
      tags:
        - event
      summary: Uninvite a user from Event
      description: Remove the invitation of any given user from the given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
        - name: user_id
          in: path
          type: integer
          required: true
          description: User ID who is to be removed from the event
      responses:
        200:
          description: Given users have been un-invited
        404:
          description: Can't find an event or user with the given ID

  /events/{event_id}/attended:
    get:
      tags:
        - event
      summary: Users who attended the event
      description: Returns a list of all the users who attended the given event.
      parameters:
        - name: event_id
          in: path
          type: integer
          required: true
          description: ID of the event
      responses:
        200:
          description: List of all users who attended the event.
          schema:
            $ref: "#/definitions/UserEvent"
        404:
          description: Can't find any event with the given ID
    post: 
      tags:
        - event
      summary: Update users who've attended the event
      description: Sets the present data for users who attended the event
      parameters:
        - name: attendee_user_ids
          in: formData
          type: string
          description: Comma Separated or Array of User IDs.
      responses:
        200:
          description: 'Attendance Marked'
        404:
          description: 'Unable to mark attendance of User'


  ######## Surveys
  /survey_templates:
    get:
      tags:
        - survey
        - survey_template
        - search
      summary: Search thru survey templates
      description: Search the survey templates table and return the rows matched by the given parameters
      parameters:
        - name: id
          in: query
          type: integer
          description: ID of the template
        - name: name
          in: query
          type: string
          description: Name of the survey template
        - name: vertical_id
          in: query
          type: integer
          description: ID of the vertical that this survey is associated with
        - name: responder
          in: query
          type: string
          enum:
            - User
            - Student
            - Center
            - City
          description: Target responder for the survey will be this.
        - name: status
          in: query
          type: string
          enum:
            - 0
            - 1
          description: Active/inactive survey templates
      responses:
        200:
          description: List of all survey templates matching given parameters
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SurveyTemplate"
    post:
      tags:
        - survey
        - survey_template
        - create
      summary: Create new survey template
      description: Create a survey template with the provided data
      parameters:
        - name: name
          in: query
          type: string
          required: true
          description: Name of the survey template
        - name: vertical_id
          in: query
          type: integer
          description: ID of the vertical that this survey is associated with
        - name: responder
          in: query
          type: string
          enum:
            - User
            - Student
            - Center
            - City
          required: true
          description: Target responder for the survey will be this.
      responses:
        200:
          description: Returns the created Template
          schema:
            $ref: "#/definitions/SurveyTemplate"

  /survey_templates/{survey_template_id}:
    get:
      tags:
        - survey
        - survey_template
      summary: Fetch one survey template
      description: Returns a survey template who's ID is given
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the survey template
      responses:
        200:
          description: Returns the created Template
          schema:
            $ref: "#/definitions/SurveyTemplate"
    post:
      tags:
        - survey
        - survey_template
      summary: Edit the given survey template
      description: Edit the given survey template with the provided data
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template that should be edited
        - name: name
          in: formData
          type: string
          description: Name of the survey template
        - name: vertical_id
          in: formData
          type: integer
          description: ID of the vertical that this survey is associated with
        - name: responder
          in: formData
          type: string
          enum:
            - User
            - Student
            - Center
            - City
          description: Target responder for the survey will be this.
      responses:
        200:
          description: Returns the edited Template
          schema:
            $ref: "#/definitions/SurveyTemplate"

  /survey_templates/{survey_template_id}/surveys:
    get:
      tags:
        - survey
      summary: Returns all surveys created from the given survey template.
      description: Returns all the surveys created using the survey template of the given ID
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
      responses:
        200:
          description: Returns all the surveys under the given template.
          schema:
            $ref: "#/definitions/Survey"

  /survey_templates/{survey_template_id}/questions:
    get:
      tags:
        - survey
        - question
      summary: Returns all questions in the given survey template.
      description: Returns all the questions in the survey template of the given ID
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
      responses:
        200:
          description: Returns all the questions under the given template.
          schema:
            $ref: "#/definitions/SurveyQuestion"
    post:
      tags:
        - survey
        - question
      summary: Creates a question
      description: Creates one question or a set of questions.
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: question
          in: formData
          required: true
          type: string
          description: The question text.
        - name: survey_question_category_id
          in: formData
          type: integer
          description: If this question is part of a category, the ID of the category goes here. Else 0.
        - name: response_type
          in: formData
          type: string
          enum:
            - text
            - choice
            - number
            - 1-10
            - 1-5
            - yes-no
            - date
            - datetime
            - file
          description:
        - name: required
          in: formData
          type: string
          enum:
            - 0
            - 1
          description: Is this field a required field(1). Or optional(0)
        - name: sort_order
          in: formData
          type: string
          description: If you want the the question to be shown in an given order, use this.
        - name: status
          type: string
          enum:
            - 0
            - 1
          description: Use this to delete/restore any question. Only question with status=1 are shown.
      responses:
        200:
          description: Creates the question
          schema:
            $ref: "#/definitions/SurveyQuestion"

  /survey_templates/{survey_template_id}/categorized_questions:
    get:
      tags:
        - survey
        - question
      summary: Returns questions in the given survey template in categorized format.
      description: This will return questions within their catogries. Very useful if the template have question categories.
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
      responses:
        200:
          description: Returns all the questions under the given template.

  /survey_templates/{survey_template_id}/questions/{survey_question_id}:
    get:
      tags:
        - survey
        - question
      summary: Returns a specific question
      description: Returns the question with the given ID
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: survey_question_id
          in: path
          type: integer
          required: true
          description: ID of the question
      responses:
        200:
          description: Returns the question
          schema:
            $ref: "#/definitions/SurveyQuestion"
    post:
      tags:
        - survey
        - question
      summary: Edit a specific question
      description: Edit the question with the given ID
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: survey_question_id
          in: path
          type: integer
          required: true
          description: ID of the question
        - name: question
          in: formData
          required: true
          type: string
          description: The question text.
        - name: survey_question_category_id
          in: formData
          type: integer
          description: If this question is part of a category, the ID of the category goes here. Else 0.
        - name: response_type
          in: formData
          type: string
          enum:
            - text
            - choice
            - number
            - 1-10
            - 1-5
            - yes-no
            - date
            - datetime
            - file
          description:
        - name: required
          in: formData
          type: string
          enum:
            - 0
            - 1
          description: Is this field a required field(1). Or optional(0)
        - name: sort_order
          in: formData
          type: string
          description: If you want the the question to be shown in an given order, use this.
        - name: status
          type: string
          enum:
            - 0
            - 1
          description: Use this to delete/restore any question. Only question with status=1 are shown.
      responses:
        200:
          description: Updates the question
          schema:
            $ref: "#/definitions/SurveyQuestion"

  /survey_templates/{survey_template_id}/questions/{survey_question_id}/choices:
    get:
      tags:
        - survey
        - choice
      summary: Returns the choices in a given question
      description: Returns the choices in the question whose ID is given.
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: survey_question_id
          in: path
          type: integer
          required: true
          description: ID of the question
      responses:
        200:
          description: Returns the choices
          schema:
            $ref: "#/definitions/SurveyChoice"
    post:
      tags:
        - survey
        - choice
      summary: Add choices to a given question
      description: Add choices/options to the question who's ID is given. You can supply multiple choices to this path in the post raw body - and all of that can be added at one go.
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: survey_question_id
          in: path
          type: integer
          required: true
          description: ID of the question
        - name: name
          in: formData
          type: string
          required: true
          description: The name of the choice.
        - name: description
          in: formData
          type: string
          description: Some description about the choice.
        - name: value
          in: formData
          type: integer
          description: Value assigned to this choice. Not used at the moment.
        - name: sort_order
          in: formData
          type: integer
          description: If you wish the choices to be sorted in a specific order, use this field.
      responses:
        200:
          description: Choices were added to the question
          schema:
            $ref: "#/definitions/SurveyChoice"

  /survey_templates/{survey_template_id}/questions/{survey_question_id}/choices/{survey_choice_id}:
    get:
      tags:
        - survey
        - choice
      summary: Returns one choice
      description: Returns the choice whose ID is given
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: survey_question_id
          in: path
          type: integer
          required: true
          description: ID of the question
        - name: survey_choice_id
          in: path
          type: integer
          required: true
          description: ID of the question
      responses:
        200:
          description: Returns one choice
          schema:
            $ref: "#/definitions/SurveyChoice"
    post:
      tags:
        - survey
        - choice
      summary: Edits a choice
      description: Edit the choice who's ID is given
      parameters:
        - name: survey_template_id
          in: path
          type: integer
          required: true
          description: ID of the template
        - name: survey_question_id
          in: path
          type: integer
          required: true
          description: ID of the question
        - name: name
          in: formData
          type: string
          required: true
          description: The name of the choice.
        - name: description
          in: formData
          type: string
          description: Some description about the choice.
        - name: value
          in: formData
          type: integer
          description: Value assigned to this choice. Not used at the moment.
        - name: sort_order
          in: formData
          type: integer
          description: If you wish the choices to be sorted in a specific order, use this field.
      responses:
        200:
          description: Edited the choice.
          schema:
            $ref: "#/definitions/SurveyChoice"
  /surveys:
    get:
      tags:
        - survey
      summary: Surveys that matches the parameters
      description:  Returns surveys that matches the given parameters.
      parameters:
        - name: id
          in: query
          type: integer
          description: ID of the survey to be returned
        - name: name
          in: query
          type: string
          description: Search for this name
        - name: vertical_id
          in: query
          type: integer
          description: Returns only surveys for this vertical
        - name: responder
          in: query
          type: string
          enum:
            - User
            - City
            - Student
            - Center
          description: Returns only survey for this type of responder.
        - name: survey_template_id
          in: query
          type: integer
          description: Returns the surveys made from this template only.
      responses:
        200:
          description: Ok
    post:
      tags:
        - survey
      summary: Create a new survey from a template
      description: Creates a new survey from the given data.
      parameters:
        - name: survey_template_id
          in: formData
          type: integer
          description: Creates a survey instance for this template
          required: true
        - name: name
          in: formData
          type: string
          description: Name of the survey instance. This will help you distinguish between multiple survey instances of the same template.
        - name: added_by_user_id
          in: formData
          type: integer
          description: The ID of the user who is creating the instance.
      responses:
        200:
          description: Created the survey
          schema:
            $ref: "#/definitions/Survey"
  /surveys/{survey_id}:
    get:
      tags:
        - survey
      summary: Return one survey instance
      description:  Returns one survey instance
      parameters:
        - name: survey_id
          in: path
          type: integer
          description: ID of the survey to be returned
      responses:
        200:
          description: Ok
          schema:
            $ref: "#/definitions/Survey"

  /surveys/{survey_id}/responses:
    get:
      tags:
        - survey
        - response
      summary: Get responses to the given survey
      description:  Returns all the responses for all questions in the given survey
      parameters:
        - name: survey_id
          in: path
          type: integer
          description: ID of the survey whose responses should be returned.
        - name: survey_question_id
          in: query
          type: string
          description: Search for responses for this qusetion.
        - name: responder_id
          in: query
          type: integer
          description: Returns the responses by the responder with this ID
      responses:
        200:
          description: Ok
          schema:
            $ref: "#/definitions/SurveyResponse"
    post:
      tags:
        - survey
        - response
      summary: Create a response set for a survey
      description: Create a full response set for a survey. All the parameters can be passed in the raw body of the request.
      parameters:
        - name: survey_id
          in: path
          type: integer
          description: Create response set for this survey
        - name: added_by_user_id
          in: formData
          type: integer
          description: The id of the user who entered this data
        - name: responder_id
          in: formData
          type: integer
          description: The ID of the user/student/etc who this survey is attached to.
        - name: survey_question_id
          in: formData
          type: integer
          description: The ID of the question who's answer is given in this set.
        - name: suvey_choice_id
          in: formData
          type: integer
          description: The ID of the choice made for this survey
        - name: response
          in: formData
          type: integer
          description: Textual response for the given question.
      responses:
        200:
          description: Created the survey response
          schema:
            $ref: "#/definitions/SurveyResponse"

  /surveys/{survey_id}/questions/{survey_question_id}/responses:
    post:
      tags:
        - survey
        - response
      summary: Create a new response for a survey question
      description: Create one response for a survey question
      parameters:
        - name: survey_id
          in: path
          type: integer
          description: Create response set for this survey
        - name: survey_question_id
          in: path
          type: integer
          description: The ID of the question who's answer is given in this set.
        - name: added_by_user_id
          in: formData
          type: integer
          description: The id of the user who entered this data
        - name: responder_id
          in: formData
          type: integer
          description: The ID of the user/student/etc who this survey is attached to.
        - name: suvey_choice_id
          in: formData
          type: integer
          description: The ID of the choice made for this survey
        - name: response
          in: formData
          type: integer
          description: Textual response for the given question.
      responses:
        200:
          description: Created the survey response
          schema:
            $ref: "#/definitions/SurveyResponse"

  ######## Notifications
  /notifications:
    get:
      tags:
        - notification
        - search
      summary: Search thru push notification
      description: Return a list of all push notification registerations that matches the given parameters
      parameters:
        - name: user_id
          in: query
          type: integer
          description: ID of the user who should be sent the notification
        - name: id
          in: query
          type: integer
          description: ID of the push notification registeration.
        - name: phone
          in: query
          type: integer
          description: Phone number of the user who should be sent the notification
        - name: imei
          in: query
          type: integer
          description: IMEI Number of the device to which the notification should be sent
        - name: fcm_regid
          in: query
          type: string
          description: FCM Registeration ID
        - name: platform
          in: query
          type: string
          enum:
            - Web
            - Android
            - Ios
          description: Platform of the device to which the notification should be sent
        - name: app
          in: query
          description: The app to which the notification should be sent.
          type: string
          enum:
            - Website
            - UPMA
            - Donut
            - ''
      responses:
        200:
          description: List of all notification registeration that matches the given parameters
          schema:
            $ref: "#/definitions/Notification"
        404:
          description: Can't find any notification registeration that matched the given parameters
    post:
      tags:
        - notification
        - create
      summary: Add a new push notification registeration
      description: New push notification registeration by app, user and device
      parameters:
        - name: user_id
          in: formData
          type: integer
          description: ID of the user whose device this is
        - name: imei
          in: formData
          type: integer
          description: IMEI Number of the device
        - name: fcm_regid
          in: formData
          type: string
          description: FCM Registeration ID
        - name: platform
          in: formData
          type: string
          enum:
            - Web
            - Android
            - Ios
          description: Platform of the device to which the notification should be sent
        - name: app
          in: formData
          description: The app to which the notification should be sent.
          type: string
          enum:
            - Website
            - UPMA
            - Donut
            - ''
      responses:
        200:
          description: Created the notification registeration
        400:
          description: There was an error in one of the parameters that was passed. You will get a more detailed reason for the issue in the response body.

# Class

# GET /classes/{class_id}
# POST /classes/
# Class->save($class_info);

# GET /users/{user_id}/classes/last
# GET /users/{user_id}/classes
#         ? level_id
#           batch_id
#           class_on
# GET /classes/
#       ? level_id
#         batch_id
#         class_on
#         user_id

# GET /classes/{class_id}/students : Includes Attendance Data
# POST /classes/{class_id}/students : Mark attendance
# POST /classes/{class_id}/students/{student_id}/participation
# POST /classes/{class_id}/students/{student_id}/check_for_understanding


definitions:
  User:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      mad_email:
        type: string
      credit:
        type: integer
      city_id:
        type: integer
      city:
        type: string
      joined_on:
        type: string
        format: "date-time"
      left_on:
        type: string
        format: "date"
      reason_for_leaving:
        type: string
      user_type:
        type: string
        enum:
        - "volunteer"
        - "let_go"
        - "alumnai"
        - "applicant"
        - "well_wisher"
      address:
        type: string
      birthday:
        type: string
        format: "date"
      photo:
        type: string
      sex:
        type: string
        enum:
        - "m"
        - "f"
        - "o"
      status:
        type: string
        enum:
          - "1"
          - "0"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/Group"
  
  UserPaginated:
    type: "object"
    properties:
      current_page: 
        type: integer
        description: Current Page Number
      data: 
        type: "array"
        items:
          $ref: "#/definitions/User"
      first_page_url: 
        type: string
      from: 
        type: integer
      last_page: 
        type: integer
      last_page_url:
        type: string
      next_page_url:
        type: string
      path:
        type: string
      per_page: 
        type: integer
      prev_page_url:
        type: string
      to:
        type: integer
      total: 
        type: integer
    
  Group:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      vertical_id:
        type: integer
      main:
        type: string
        enum:
          - "1"
          - "0"

  Student:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      birthday:
        type: string
        format: "date"
      added_on:
        type: string
        format: "date-time"
      center_id:
        type: integer
      sex:
        type: string
        enum:
          - "m"
          - "f"
          - "u"
  City:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      president_id:
        type: integer
      type:
        type: string
        enum:
          - "actual"
          - "virtual"
  Batch:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      day:
        type: integer
      class_time:
        type: string
        format: "time"
      batch_head_id:
        type: integer
      center_id:
        type: integer
      project_id:
        type: integer
      vertical_id:
        type: integer
      status:
        type: string
        enum:
          - "1"
          - "0"
      mentors:
        type: "array"
  Level:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      grade:
        type: integer
      center_id:
        type: integer
      project_id:
        type: integer
      medium:
        type: string
        enum:
          - english
          - vernacular
      preferred_gender:
        type: string
        enum:
          - male
          - female
          - any
      year:
        type: integer
      status:
        type: string
        enum:
          - "1"
          - "0"
  Subject:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      status:
        type: string
        enum:
          - "1"
          - "0"
            
  Donation:
    type: "object"
    properties:
      id:
        type: integer
      type:
        type: string
        enum:
          - "cash"
          - 'cheque'
          - 'nach'
          - 'globalgiving'
          - 'giveindia'
          - 'online'
          - 'other'
      fundraiser_user_id:
        type: integer
      donor_id:
        type: integer
      with_user_id:
        type: integer
      status:
        type: string
        enum:
          - receipted
          - collected
          - deposited
      amount:
        type: integer
      cheque_no:
        type: string
      added_on:
        type: string
        format: "date-time"
      updated_on:
        type: string
        format: "date-time"
      updated_by_user_id:
        type: integer
      comment:
        type: string
      fundraiser:
        type: string
      donor:
        type: string
      deposit:
        type: "array"
        items:
          $ref: "#/definitions/Deposit"
  Deposit:
    type: "object"
    properties:
      id:
        type: integer
      collected_from_user_id:
        type: integer
      given_to_user_id:
        type: integer
      added_on:
        type: string
        format: "date-time"
      reviewed_on:
        type: string
        format: "date-time"
      amount:
        type: integer
      status:
        type: string
        enum:
          - approved
          - pending
          - rejected
      given_to_user_name:
        type: string
      collected_from_user_name:
        type: string
  Event:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      starts_on:
        type: string
        format: "date-time"
      place:
        type: string
      city_id:
        type: string
      event_type_id:
        type: integer
      event_type:
        type: string
      created_by_user_id:
        type: string
        format: "date-time"
      location:
        type: string
      created_on:
        type: string
        format: "date-time"
  Event_Type:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      vertical_id:
        type: integer      
  UserEvent:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      present:
        type: string
        enum:
          - 0
          - 1
      late:
        type: string
        enum:
          - 0
          - 1
      rsvp:
        type: string
        enum:
          - no_data
          - going
          - maybe
          - cant_go
      reason:
        type: string

  SurveyTemplate:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      added_on:
        type: string
        format: "date-time"
      vertical_id:
        type: integer
      responder:
        type: string
        enum:
          - User
          - Student
          - Center
          - City
      options:
        type: string
      status:
        type: string
        enum:
          - 0
          - 1
  Survey:
    type: "object"
    properties:
      survey_template_id:
        type: integer
      added_by_user_id:
        type: integer
      survey_id:
        type: integer
      name:
        type: string
  SurveyQuestion:
    type: "object"
    properties:
      id:
        type: integer
      question:
        type: string
      survey_question_category_id:
        type: integer
      survey_template_id:
        type: integer
      response_type:
        type: string
        enum:
          - text
          - choice
          - 1-5
          - 1-10
          - number
          - yes-no
          - date
          - datetime
          - file
          - longtext
      required:
        type: string
        enum:
          - 1
          - 0
      sort_order:
        type: integer
      options:
        type: string
      status:
        type: string
        enum:
          - 1
          - 0
  SurveyChoice:
    type: "object"
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      value:
        type: integer
      survey_question_id:
        type: integer
      sort_order:
        type: integer
      options:
        type: string
      status:
        type: string
        enum:
          - 0
          - 1
  SurveyResponse:
    type: "object"
    properties:
      id:
        type: integer
      survey_id:
        type: integer
      responder_id:
        type: integer
      survey_question_id:
        type: integer
      survey_choice_id:
        type: integer
      response:
        type: string
      added_on:
        type: string
        format: "date-time"
      added_by_user_id:
        type: integer
  Device:
    type: "object"
    properties:
      id:
        type: integer
      user_id:
        type: integer
      name:
        type: string
      token:
        type: string
      status:
        type: string
        enum:
          - 1
          - 0
  Comment:
    type: "object"
    properties:
      id:
        type: integer
      item_type:
        type: string
      item_id:
        type: integer
      comment:
        type: string
      added_by_user_id:
        type: integer
      added_on:
        type: string
        format: "date-time"

  Notification:
    type: "object"
    properties:
      user_id:
        type: integer
      imei:
        type: integer
      fcm_regid:
        type: string
      platform:
        type: string
        enum:
          - Web
          - Android
          - Ios
      app:
        type: string
        enum:
          - Website
          - UPMA
          - Donut
          - ''

  UserGroups:
    type: "object"
    properties:
      group_id:
        type: integer
      main:
        type: string
        enum:
          - 0
          - 1
